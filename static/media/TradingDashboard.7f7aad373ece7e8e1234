import React, { useState } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Tabs, TabsList, TabsTrigger, TabsContent } from '@/components/ui/tabs';
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { AlertCircle, TrendingUp, Settings, Activity } from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';

const TradingDashboard = () => {
// Sample data - this would come from your daily signals
const signalsData = {
"VOO": { signal: "BUY", rsi: 35, volatility: 0.95 },
"SSO": { signal: "HOLD", rsi: 45, volatility: 1.2 },
"UPRO": { signal: "SELL", rsi: 75, volatility: 1.8 },
"QQQ": { signal: "BUY", rsi: 32, volatility: 0.9 },
"QLD": { signal: "HOLD", rsi: 48, volatility: 1.3 },
"TQQQ": { signal: "SELL", rsi: 78, volatility: 1.9 },
"SOXL": { signal: "HOLD", rsi: 52, volatility: 1.4 }
};

const getSignalColor = (signal) => {
switch (signal) {
case 'BUY': return 'bg-green-100 text-green-800';
case 'SELL': return 'bg-red-100 text-red-800';
default: return 'bg-gray-100 text-gray-800';
}
};

return (
<div className="min-h-screen bg-gray-50 p-8">
	<div className="max-w-7xl mx-auto">
		<h1 className="text-3xl font-bold mb-8">Trading Strategy Dashboard</h1>

		<div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
			<Card>
				<CardHeader className="flex flex-row items-center justify-between pb-2">
					<CardTitle className="text-sm font-medium">Active Signals</CardTitle>
					<Activity className="h-4 w-4 text-gray-500" />
				</CardHeader>
				<CardContent>
					<div className="text-2xl font-bold">
						{Object.values(signalsData).filter(d => d.signal === 'BUY').length}
					</div>
					<p className="text-xs text-gray-500">Buy Signals</p>
				</CardContent>
			</Card>

			<Card>
				<CardHeader className="flex flex-row items-center justify-between pb-2">
					<CardTitle className="text-sm font-medium">Average RSI</CardTitle>
					<TrendingUp className="h-4 w-4 text-gray-500" />
				</CardHeader>
				<CardContent>
					<div className="text-2xl font-bold">
						{(Object.values(signalsData).reduce((acc, curr) => acc + curr.rsi, 0) /
						Object.values(signalsData).length).toFixed(1)}
					</div>
					<p className="text-xs text-gray-500">Across all symbols</p>
				</CardContent>
			</Card>

			<Card>
				<CardHeader className="flex flex-row items-center justify-between pb-2">
					<CardTitle className="text-sm font-medium">Volatility Alert</CardTitle>
					<AlertCircle className="h-4 w-4 text-gray-500" />
				</CardHeader>
				<CardContent>
					<div className="text-2xl font-bold">
						{Object.values(signalsData).filter(d => d.volatility > 1.5).length}
					</div>
					<p className="text-xs text-gray-500">High volatility symbols</p>
				</CardContent>
			</Card>
		</div>

		<Tabs defaultValue="signals" className="space-y-4">
			<TabsList>
				<TabsTrigger value="signals">Current Signals</TabsTrigger>
				<TabsTrigger value="parameters">Strategy Parameters</TabsTrigger>
			</TabsList>

			<TabsContent value="signals" className="space-y-4">
				<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
					{Object.entries(signalsData).map(([symbol, data]) => (
					<Card key={symbol}>
						<CardHeader>
							<CardTitle className="text-xl">{symbol}</CardTitle>
						</CardHeader>
						<CardContent>
							<div className={`inline-block px-2 py-1 rounded-full text-sm font-semibold mb-2
								${getSignalColor(data.signal)}`}>
								{data.signal}
							</div>
							<div className="space-y-2">
								<div className="flex justify-between">
									<span className="text-gray-500">RSI</span>
									<span className="font-medium">{data.rsi}</span>
								</div>
								<div className="flex justify-between">
									<span className="text-gray-500">Volatility</span>
									<span className="font-medium">{data.volatility.toFixed(2)}</span>
								</div>
							</div>
						</CardContent>
					</Card>
					))}
				</div>
			</TabsContent>

			<TabsContent value="parameters">
				<Card>
					<CardHeader>
						<CardTitle>Current Strategy Parameters</CardTitle>
					</CardHeader>
					<CardContent>
						<div className="space-y-4">
							<Alert>
								<Settings className="h-4 w-4" />
								<AlertDescription>
									Parameters are optimized weekly using Monte Carlo simulation
								</AlertDescription>
							</Alert>

							<div className="grid grid-cols-1 md:grid-cols-2 gap-4">
								<div>
									<h3 className="font-semibold mb-2">Moving Averages</h3>
									<div className="space-y-1">
										<div className="flex justify-between">
											<span className="text-gray-500">Short MA</span>
											<span>47 days</span>
										</div>
										<div className="flex justify-between">
											<span className="text-gray-500">Long MA</span>
											<span>57 days</span>
										</div>
									</div>
								</div>

								<div>
									<h3 className="font-semibold mb-2">RSI Settings</h3>
									<div className="space-y-1">
										<div className="flex justify-between">
											<span className="text-gray-500">Period</span>
											<span>29 days</span>
										</div>
										<div className="flex justify-between">
											<span className="text-gray-500">Oversold</span>
											<span>38</span>
										</div>
										<div className="flex justify-between">
											<span className="text-gray-500">Overbought</span>
											<span>77</span>
										</div>
									</div>
								</div>
							</div>
						</div>
					</CardContent>
				</Card>
			</TabsContent>
		</Tabs>
	</div>
</div>
);
};

export default TradingDashboard;